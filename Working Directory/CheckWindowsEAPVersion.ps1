function ConvertFrom-NetshProfiles {[CmdletBinding()]Param(    [Parameter(Mandatory,Position=0)]    [array]$Profiles)    $Hash = [ordered]@{}    foreach($line in $Profiles){        if ($line -notmatch "======================================================================="){            switch -Regex ($line){                '^Profile on interface\s+(?<ProfileOnInterface>.*$)'{$Hash.ProfileOnInterface = $Matches.ProfileOnInterface;Break}                '^Applied:\s+(?<Applied>.*$)'{$Hash.Applied = $Matches.Applied;Break}                '\s*Profile version\s*:\s+(?<ProfileVersion>.*$)'{$Hash.ProfileVersion = $Matches.ProfileVersion;Break}                '\s{4,}Type\s*:\s+(?<Type>.*$)'{$Hash.Type = $Matches.Type;Break}                '\s*AutoConfig Version\s*:\s+(?<AutoConfigVersion>.*$)'{$Hash.AutoConfigVersion = $Matches.AutoConfigVersion;Break}                '\s*802\.1x\s*:\s+(?<Enforced802_1x>(?!Enabled).*$)'{$Hash.Enforced802_1x = $Matches.Enforced802_1x;Break}                '\s*802\.1x\s*:\s+(?<Enabled802_1x>.*$)'{$Hash.Enabled802_1x = $Matches.Enabled802_1x;Break}                '\s*EAP type\s*:\s+(?<EAPType>.*$)'{$Hash.EAPType = $Matches.EAPType;Break}                '\s*802\.1X auth credential\s*:\s+(?<AuthCredential802_1x>.*$)'{$Hash.AuthCredential802_1x = $Matches.AuthCredential802_1x;Break}                '\s*Cache user information\s*:\s+(?<CacheUserInformation>.*$)'{$Hash.CacheUserInformation = $Matches.CacheUserInformation;Write-Output (New-Object psobject -Property $Hash);Break}                default {Break}            }        }    }}$getConnectedAdapters = Get-NetAdapter | where {$_.Status -eq "Up"}$netInfo = New-Object System.Collections.ArrayListforeach ($connectedAdapter in $getConnectedAdapters) {    $netAdapterName = $connectedAdapter.Name    $netAdapterDesc = $connectedAdapter.InterfaceDescription    if ($netAdapterName -like "Wi-Fi*") {        $netshWP = ConvertFrom-NetshProfiles -Profiles (& netsh wlan show profiles choacorp)        $eapType = $netshWP.EAPType        #write-host "$netAdapterName, $netAdapterDesc, $eapType"
        $netInfo.Add(@($netAdapterName, $netAdapterDesc, $eapType)) > $null    }else{        $netshP = ConvertFrom-NetshProfiles -Profiles (& netsh lan show profiles $netAdapterName)        $eapType = $netshP.EAPType        #write-host "$netAdapterName, $netAdapterDesc, $eapType"
        $netInfo.Add(@($netAdapterName, $netAdapterDesc, $eapType)) > $null    }}$compliant = $trueforeach ($a in $netInfo) {   $var = $a[2]   if ($var -notlike "Microsoft: Smart Card or other certificate*") {       $compliant = $false       $compName = $env:COMPUTERNAME       $name1 = $a[0]       $desc1 = $a[1]       $eapT1 = $a[2]       if (!(test-path -Path "\\choa-cifs\install\WindowsLogs\EAP\$compName.tag")) {            Write-Output "$compName, $name1, $desc1, $eapT1" | out-file "\\choa-cifs\install\WindowsLogs\EAP\eapTypes.csv" -Force -Append            New-Item -ItemType File -Path "\\choa-cifs\install\WindowsLogs\EAP" -Name "$compName.tag"       }   }}if ($compliant -eq $true) {    return $true}else{    return $false}